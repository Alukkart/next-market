generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("PRISMA_URL")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     Role      @default(USER)
    verified DateTime?

    provider   String?
    providerId String?

    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    Cart             Cart?
    Order            Order[]
    VerificationCode VerificationCode?
}

model Category {
    id Int @id @default(autoincrement())

    name     String    @unique
    products Product[]
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    ingredients Ingredient[]
    items       ProductItem[]

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    pizzaSize Int?
    pizzaType Int?

    productId Int
    product   Product    @relation(fields: [productId], references: [id])
    CartItem  CartItem[]
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    products Product[]

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    CartItem   CartItem? @relation(fields: [cartItemId], references: [id])
    cartItemId Int?
}

model Cart {
    id Int @id @default(autoincrement())

    user        User?  @relation(fields: [userId], references: [id])
    userId      Int?   @unique
    totalAmount Int    @default(0)
    token       String

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullname String
    address  String
    email    String
    phone    String
    comment  String?
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

    createdAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELED
}

enum Role {
    USER
    ADMIN
}
